%{
def join(xs, j=", "):
  return j.join(xs)
def ifx(c, y, n=""):
  return y if c else n
def either(n):
  return "Either{}".format(n)
def either_ts(n, t):
  return "{}<{}>".format(either(n), join(t_vars(t, n)))
def t_vars(t, n):
  return ["{}{}".format(t, i) for i in range(n)]
def typename_t_vars(t, n):
  return ["typename {}{}".format(t, i) for i in range(n)]

n_list = [2, 3, 4, 5, 6, 7, 8]
}%
#pragma once

#include "./assert.h"
#include "./fatal.h"
#include "./std_dependency.h"

namespace rhetoric {
% for n in n_list:
    enum class ${either(n)}Tag : int8_t {
%   for i in range(n):
        Case${i}${ifx(i < n-1, ",")}
%   end
    };

    template <${either(n)}Tag G, typename T> struct ${either(n)}CaseWrapper;

    template <${either(n)}Tag G, typename T>
    ${either(n)}CaseWrapper<G, T>
    EitherCase(const T & value);

    template <${join(typename_t_vars("T", n))}>
    class ${either(n)} {
    public:
        ${either(n)}() = delete;
%   for i in range(n):
        /* implicit */ ${either(n)}(const ${either(n)}CaseWrapper<${either(n)}Tag::Case${i}, T${i}> & value);
%   end
        ${either(n)}(const ${either_ts(n, "T")} & other);
        template <${join(typename_t_vars("U", n))}>
        ${either(n)}(
        	const ${either_ts(n, "U")} & other,
            std::enable_if_t<
%   for i in range(n):
                std::is_convertible<U${i}, T${i}>::value${ifx(i < n-1, " &&", "")}
%   end
            > * = nullptr);
        ${either_ts(n, "T")} & operator= (const ${either_ts(n, "T")} & other);
        ~${either(n)}();
        
        ${either(n)}Tag tag() const;
%   for i in range(n):
        const T${i} & AsCase${i}() const;
%   end

%   for i in range(n):
        template <${either(n)}Tag G>
        const T${i} & AsCase(std::enable_if_t<  G == ${either(n)}Tag::Case${i}  > * = nullptr) const 
        { return AsCase${i}(); }
        
%   end
    private:
        union Storage {
%   for i in range(n):
            T${i} value${i};
%   end

            Storage();
            ~Storage();
        };

%   for i in range(n):
        void InitValue${i}(const T${i} & value);
%   end    
        void Deinit();
        
        Storage storage_;
        ${either(n)}Tag tag_;
    };

    template <${either(n)}Tag G, typename T>
    struct ${either(n)}CaseWrapper {
        T value;
        ${either(n)}CaseWrapper(const T & value);
    };

% end    
}

#include "./either_inline.h"
